from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import hashlib
import os

# –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç fastapi_server/, —Ç–∞–∫ –∫–∞–∫ app.py –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–∞–ø–∫–∏
from ai import router as ai_router
from adapters.db_source import DatabaseAdapter

# üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# üîß FastAPI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app = FastAPI(
    docs_url="/api/docs",
    openapi_url="/api/openapi.json"
)

# üßæ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∑–∂–µ)
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º AI —Ä–æ—É—Ç—ã
app.include_router(ai_router, prefix="/ai", tags=["AI"])

# üîç –ü–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
@app.post("/ping")
async def negative_scenario():
    return {"status": "workkkkkk"}

# üí∏ Callback –æ—Ç Freekassa
@app.post("/payment/freekassa_callback")
async def freekassa_callback(request: Request):
    form = await request.form()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        amount = form.get('AMOUNT')
        order_id = form.get('MERCHANT_ORDER_ID')
        sign = form.get('SIGN')
        merchant_id = form.get('MERCHANT_ID')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([amount, order_id, sign, merchant_id]):
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (—Å–µ–∫—Ä–µ—Ç 1)
        secret_word = os.getenv("FREEKASSA_SECRET_WORD")
        sign_str = f"{merchant_id}:{amount}:{secret_word}:{order_id}"
        expected_sign = hashlib.md5(sign_str.encode()).hexdigest()

        if expected_sign != sign:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")

        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ (–≥–¥–µ order_id ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω)
        db = DatabaseAdapter()
        db.connect()

        token = order_id
        token_data = db.get_by_value("tokens", "token", token)

        if not token_data:
            raise HTTPException(status_code=404, detail="–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        old_balance = float(token_data[0]["balance"])
        new_balance = old_balance + float(amount)

        db.update_by_value("tokens", {"balance": new_balance}, "token", token)

        print(f"‚úÖ Freekassa –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {token} +{amount}‚ÇΩ")

        return "YES"  # üî• –û–ß–ï–ù–¨ –≤–∞–∂–Ω–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ä–æ–≤–Ω–æ "YES" –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ callback: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
@app.get("/payment/success")
async def payment_success():
    return {"status": "success", "message": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"}

@app.get("/payment/fail")
async def payment_fail():
    return {"status": "fail", "message": "–û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"}

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    host, port = os.getenv("FAST_API_HOST"), os.getenv("FAST_API_PORT")
    uvicorn.run(app, host=host, port=int(port), http="httptools")
