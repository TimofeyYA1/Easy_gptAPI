import asyncio
import os
import sys
import pathlib
import hashlib
import httpx

sys.path.append(str(pathlib.Path(__file__).resolve().parent.parent))

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from adapters.db_source import DatabaseAdapter

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
admin_id = os.getenv("ADMIN_ID")
freekassa_merchant_id = os.getenv("FREEKASSA_MERCHANT_ID")
freekassa_secret_word = os.getenv("FREEKASSA_SECRET_WORD")
freekassa_secret_word2 = os.getenv("FREEKASSA_SECRET_WORD2")

bot = Bot(token=bot_token)
dp = Dispatcher(storage=MemoryStorage())
db = DatabaseAdapter()
db.connect()
db.initialize_tables()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TokenRecharge(StatesGroup):
    waiting_for_amount_choice = State()
    waiting_for_token = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")],
        [KeyboardButton(text="–ú–æ–∏ —Ç–æ–∫–µ–Ω—ã")],
        [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω")]
    ],
    resize_keyboard=True
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
def generate_token_keyboard(tokens: list[dict], action: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{t['token']} ({t['balance']}‚ÇΩ)",
            callback_data=f"{action}:{t['token']}"
        )]
        for t in tokens
    ])
    return keyboard

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Freekassa
def generate_freekassa_payment_link(token: str, amount: float) -> str:
    amount_str = str(amount)
    sign_string = f"{freekassa_merchant_id}:{amount_str}:{freekassa_secret_word}:{token}"
    sign = hashlib.md5(sign_string.encode()).hexdigest()

    link = f"https://pay.freekassa.ru/?m={freekassa_merchant_id}&oa={amount_str}&o={token}&s={sign}"
    return link

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Freekassa API
async def check_freekassa_payment(token: str) -> bool:
    sign_str = f"{freekassa_merchant_id}:{freekassa_secret_word2}:{token}"
    sign = hashlib.md5(sign_str.encode()).hexdigest()

    url = "https://www.free-kassa.ru/api.php"
    params = {
        "m": "check_order_status",
        "merchant_id": freekassa_merchant_id,
        "order_id": token,
        "s": sign
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, params=params)
        text = response.text.strip()

    return text == "paid"

# /start
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    user = db.get_by_id("users", user_id)
    if user:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_keyboard)
    else:
        db.insert("users", {"id": user_id, "username": username})
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API.\n"
            "–°–æ–∑–¥–∞–π —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!", reply_markup=main_keyboard
        )

# –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")
async def create_token_handler(message: Message):
    user_id = message.from_user.id
    new_token = f"tok_{os.urandom(8).hex()}"
    db.insert("tokens", {"user_id": user_id, "token": new_token, "balance": 10.0})
    await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:\n`{new_token}`\nüí∞ –ë–∞–ª–∞–Ω—Å: 0.0", parse_mode="Markdown")

# –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã
@dp.message(F.text == "–ú–æ–∏ —Ç–æ–∫–µ–Ω—ã")
async def list_tokens_handler(message: Message):
    user_id = message.from_user.id
    tokens = db.get_by_value("tokens", "user_id", user_id)

    if not tokens:
        await message.answer("üòï –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    text = "üîê –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã:\n\n"
    for t in tokens:
        text += f"üÜî `{t['token']}` ‚Äî üí∞ {t['balance']}‚ÇΩ\n"
    await message.answer(text, parse_mode="Markdown")

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞
@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")
async def start_recharge(message: Message, state: FSMContext):
    user_id = message.from_user.id
    tokens = db.get_by_value("tokens", "user_id", user_id)
    if not tokens:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    keyboard = generate_token_keyboard(tokens, "recharge")
    await message.answer("üîë –í—ã–±–µ—Ä–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=keyboard)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω
@dp.callback_query(F.data.startswith("recharge:"))
async def choose_token_to_recharge(callback: CallbackQuery, state: FSMContext):
    token = callback.data.split("recharge:")[1]
    await state.update_data(token=token)

    amount_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ 100‚ÇΩ", callback_data="pay:100")],
        [InlineKeyboardButton(text="üíµ 500‚ÇΩ", callback_data="pay:500")],
        [InlineKeyboardButton(text="üíµ 1000‚ÇΩ", callback_data="pay:1000")],
        [InlineKeyboardButton(text="üíµ 5000‚ÇΩ", callback_data="pay:5000")],
    ])
    await callback.message.edit_text("üí∏ –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=amount_keyboard)
    await state.set_state(TokenRecharge.waiting_for_amount_choice)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ Freekassa
@dp.callback_query(TokenRecharge.waiting_for_amount_choice, F.data.startswith("pay:"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    amount = int(callback.data.split("pay:")[1])
    data = await state.get_data()
    token = data["token"]

    payment_link = generate_freekassa_payment_link(token, amount)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_link)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment:{amount}")]
    ])

    await state.update_data(payment_amount=amount)
    await callback.message.edit_text(
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–ù–∞–∂–º–∏ —Å—é–¥–∞]({payment_link})\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query(F.data.startswith("check_payment:"))
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    token = data.get("token")
    amount = int(callback.data.split("check_payment:")[1])

    if not token:
        await callback.message.edit_text("‚ùó –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    is_paid = await check_freekassa_payment(token)

    if is_paid:
        token_data = db.get_by_value("tokens", "token", token)
        old_balance = float(token_data[0]["balance"])
        new_balance = old_balance + amount
        db.update_by_value("tokens", {"balance": new_balance}, "token", token)

        await callback.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ")
    else:
        await callback.message.edit_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    import logging
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
